from scipy.integrate import *
from scipy.interpolate import *
import matplotlib
from matplotlib import rc
from matplotlib import axes
from numpy import *
from pylab import *
from scipy.integrate import cumtrapz

import numpy.random
# import time
import os
import os.path

#Uncomment the following if you want to use LaTeX in figures 
rc('font',**{'family':'serif'})
rc('mathtext',fontset='cm')
rc('mathtext',rm='stix')
rc('text', usetex=True)
# #add amsmath to the preamble
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amssymb,amsmath}"] 

close('all')
ioff()

# atomic data:

# names:
# names = ['hydrogen', 'helium', 'lithium', 'beryllium', 'boron',
#         'carbon', 'nitrogen', 'oxygen', 'fluorine', 'neon',
#         'sodium', 'magnesium', 'alimunium', 'silicon', '']
el = ['H', 'He',
      'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne',
      'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar',
      'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn']
# then goes a huge drop in abundance

#abundances: (Grevesse & Sauval 1996 standard abundances)
abund = [12., 10.99,
         1.16, 1.15, 2.6, 8.55, 7.97, 8.87, 4.56, 8.08,
         6.44, 7.58, 6.47, 7.55, 5.45, 7.33, 5.5, 6.52,
         5.12, 6.36, 3.17, 5.02, 4.0, 5.67, 5.39, 7.5, 4.92, 6.25, 4.21, 4.6]

# ionization potentials:
iop = [13.59844, 24.58741,
       5.39172, 9.3227, 8.29803, 11.26030, 14.53414, 13.61806, 17.42282, 21.5646,
       5.13908, 7.64624, 5.98577, 8.15169, 10.48669, 10.36001, 12.96764, 15.75962,
       4.34066, 6.11316, 6.5615, 6.8281, 6.7462, 6.7665, 7.43402, 7.9024, 7.8810, 7.6398, 7.72638, 9.3942]
# from H to Zn
# borrowed from: David R. Lide (ed), CRC Handbook of Chemistry and Physics, 84th Edition. CRC Press. Boca Raton, Florida, 2003; Section 10, Atomic, Molecular, and Optical Physics; Ionization Potentials of Atoms and Atomic Ions

sahacoeff = 1.30959e-5
ioconvert = 11.6046
xtol = 1e-3

for k in arange(size(el)):
    print(el[k]+": Z="+str(abund[k])+"; IP="+str(iop[k])+"\n")

def abundfun(temp, n15, x): # temperature in kK, n15 = nH/10^{15}cm^{-3}
    z = (10.)**(abund-12.) # physical abundances with respect to hydrogen

    return (z/(1.+sahacoeff*x*n15/temp**1.5*exp(ioconvert * iop/temp))).sum()

def findiofr(temp, n15, xseed = 0.5):
    '''
    finds ionization fraction by direct iterations
    '''
    x1=0. ; x2=1.
    x=xseed
    while(abs(x1/x2-1.)>xtol):
        x2 = abundfun(temp, n15, x1)
        print("x = "+str(x1)+" = "+str(x2))
        x1=x2

    return (x1+x2)/2.

